#!/usr/bin/env /lib/init/init-d-script

### BEGIN INIT INFO
# Provides:   minecraft-init
# Required-Start: $local_fs $remote_fs screen-cleanup
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server management script
# Description:    Starts and stops the minecraft server
### END INIT INFO

# Loads config file
source /etc/minecraft-init.conf
[[ $? ! -e 0 ]] && echo "Could not source /etc/minecraft-init.conf. Have you run the install.sh script?"; exit || echo "Successfully sourced /etc/minecraft-init.conf"

# Test for dependencies
for i in java wget python screen
do
    [[ ! -x $(which $i) ]] && echo "minecraft-init could not locate $i on the system. Is it installed and in the system's path?" && return 1
    logger -t minecraft-init "minecraft-init could not locate $1 on the system. Is it installed and in the system's path?"
done

# Script begins
INVOCATION="java -Xmx${MAXHEAP}M -Xms${MINHEAP}M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=$CPU_COUNT -XX:+AggressiveOpts -jar $serverName $OPTIONS" 
_asUser() {
  if [ "$(whoami)" = "$userName" ] ; then
    /usr/bin/env bash -c "$1"
  else
    su - "$userName" bash -c "$1"
  fi
}

mc_start() {
  if pgrep -u $userName -f $serverName > /dev/null ; then
    echo "$serverName is already running!"
  else
    _asUser "cd $dataPath; screen -h 1024 -dmS ${serverName} $INVOCATION"
    echo "Starting Minecraft server..."
    sleep 2
    if pgrep -u $userName -f $serverName > /dev/null ; then
      echo "$serverName is now running."
    else
      echo "Error! Could not start $serverName!"
      echo "Have you agreed to the EULA?"
    fi
  fi
}

mc_stop() {
  if pgrep -u $userName -f $serverName > /dev/null ; then
    echo "Stopping $serverName"
    _asUser "screen -p 0 -S ${serverName} -X eval 'stuff \"say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map...\"\015'"
    _asUser "screen -p 0 -S ${serverName} -X eval 'stuff \"save-all\"\015'"
    sleep 10
    _asUser "screen -p 0 -S ${serverName} -X eval 'stuff \"stop\"\015'"
    sleep 7
  else
    echo "$serverName was not running."
  fi
  if pgrep -u $userName -f $serverName > /dev/null ; then
    echo "Error! $serverName could not be stopped."
  else
    echo "$serverName is stopped."
  fi
}

mc_update() {
  echo "** Remember to accept the EULA! **"
  case "$1" in
    bukkit|spigot)
      _asUser "\
              cd $dataPath \
              git config --global --unset core.autocrlf \
              wget -q https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar -O $dataPath/BuildTools.jar \
              chmod +x $dataPath/BuildTools.jar \
              java -jar $dataPath/BuildTools.jar --rev $REVISION
      "
      ;;
    sponge)
      #fixme: implement sponge updating
      echo "Sponge support coming soon..."
      ;;
    
    vanilla)
      if pgrep -u $userName -f $serverName > /dev/null ; then
        echo "$serverName is running! Will not start update."
      else
        _asUser "cd $dataPath && wget -q -O $dataPath/versions --no-check-certificate https://launchermeta.mojang.com/mc/game/version_manifest.json"
        if [ "$1" == "snapshot" ] ; then
          JSONVERSION=$(cd $dataPath && cat versions | python -c "exec(\"import json,sys\nobj=json.load(sys.stdin)\nversion=obj['latest']['snapshot']\nfor v in obj['versions']:\n   if v['id']==version:\n    print v['url']\")")
        else
          JSONVERSION=$(cd $dataPath && cat versions | python -c "exec(\"import json,sys\nobj=json.load(sys.stdin)\nversion=obj['latest']['release']\nfor v in obj['versions']:\n   if v['id']==version:\n    print v['url']\")")
        fi
        _asUser "cd $dataPath && wget -q -O $dataPath/versions --no-check-certificate $JSONVERSION"
        MC_SERVER_URL=$(cd $dataPath && cat versions | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["downloads"]["server"]["url"]')
        _asUser "rm $dataPath/versions"
        _asUser "cd $dataPath && wget -q -O $dataPath/minecraft_server.jar.update --no-check-certificate $MC_SERVER_URL"
        if [ -f $dataPath/minecraft_server.jar.update ] ; then
          if $(diff $dataPath/$serverName $dataPath/minecraft_server.jar.update >/dev/null) ; then
            echo "You are already running the latest version of $serverName."
          else
            _asUser "mv $dataPath/minecraft_server.jar.update $dataPath/$serverName"
            echo "Minecraft successfully updated."
          fi
        else
          echo "Minecraft update could not be downloaded."
        fi
      fi
      ;;
  esac
}

mc_command() {
  command="$1";
  if pgrep -u $userName -f $serverName > /dev/null ; then
    pre_log_len=$(wc -l "$dataPath/logs/latest.log" | awk '{print $1}')
    echo "$serverName is running... executing command"
    _asUser "script /dev/null"
    _asUser "screen -p 0 -S ${serverName} -X eval 'stuff \"$command\"\015'"
    sleep 0.1 # assumes that the command will run and print to the log file in less than .1 seconds
    # print output
    tail -n $[$(wc -l "$dataPath/logs/latest.log" | awk '{print $1}')-$pre_log_len] "$dataPath/logs/latest.log"
  fi
}

#Start-Stop here
case "$1" in
  console)
    _asUser "screen -x $serverName"
    ;;
  start)
    mc_start
    ;;
  stop)
    mc_stop
    ;;
  restart)
    mc_stop
    mc_start
    ;;
  update)
    mc_stop
    mc_update $FLAVOR
    mc_start
    ;;
  status)
    _asUser "screen -wipe"
    if pgrep -u $userName -f $serverName > /dev/null ; then
      echo "$serverName is running."
    else
      echo "$serverName is not running."
    fi
    ;;
  command)
    if [ $# -gt 1 ] ; then
      shift
      mc_command "$*"
    else
      echo "Must specify server command (try 'help'?)"
    fi
    ;;

  *)
  echo "Usage: $0 {start|stop|update|console|status|restart|command \"server command\"}"
  exit 1
  ;;
esac

exit 0
