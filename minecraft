#!/bin/bash
# /etc/init.d/minecraft

### BEGIN INIT INFO
# Provides:   minecraft
# Required-Start: $local_fs $remote_fs screen-cleanup
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Minecraft server
# Description:    Starts the minecraft server
### END INIT INFO

# Modified by Jonathan Alfonso

# Based on http://minecraft.gamepedia.com/Tutorials/Server_startup_script

# OS X does not support init.d scripts; prevent running on OS X.
# If you use a Darwin-based distribution with init.d support, commment the following four lines out.

if [[ "$(uname)" == "Darwin" ]]; then
	echo "OS X is not supported."
	exit 1
fi

# Loads config file

source $(dirname $(readlink -e $0))/config

[[ "$SERVICE" == "" ]] && {
	echo "Couldn't load config file, please edit config.example and rename it to config"
	logger -t minecraft-init "Couldn't load config file, please edit config.example and rename it to config"
	exit
}

# Test for java
hash java 2>/dev/null || {
  echo >&2 "Java not found. Aborting."
  exit 1
}
# Test for screen
hash screen 2>/dev/null || {
  echo >&2 "screen not found. Aborting."
  exit 1
}


# Script begins

ME=$(whoami)
INVOCATION="java -Xmx${MAXHEAP}M -Xms${MINHEAP}M -XX:+UseConcMarkSweepGC -XX:+CMSIncrementalPacing -XX:ParallelGCThreads=$CPU_COUNT -XX:+AggressiveOpts -jar $SERVICE $OPTIONS" 
as_user() {
  if [ "$ME" = "$USERNAME" ] ; then
    bash -c "$1"
  else
    su - "$USERNAME" -c "$1"
  fi
}

mc_start() {
  echo "Debug: mc_start() began"
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "$SERVICE is already running!"
  else
    as_user "cd $MCPATH; screen -h 1024 -dmS ${SCREENNAME} $INVOCATION"
    as_user "echo $MCPATH"
	echo "Starting Minecraft server..."
	sleep 2
    if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
      echo "$SERVICE is now running."
    else
      echo "Error! Could not start $SERVICE!"
      echo "Have you agreed to the EULA?"
    fi
  fi
}

mc_stop() {
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo "Stopping $SERVICE"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"say SERVER SHUTTING DOWN IN 10 SECONDS. Saving map...\"\015'"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"save-all\"\015'"
    sleep 10
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"stop\"\015'"
    sleep 7
  else
    echo "$SERVICE was not running."
  fi
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    echo " * Error! $SERVICE could not be stopped."
  else
    echo " * $SERVICE is stopped."
  fi
}

mc_update() {
  echo " * Remember to accept the EULA!"
  case "$1" in
    bukkit|spigot)
      as_user "\
              cd $MCPATH; echo $MCPATH \
              git config --global --unset core.autocrlf \
              wget -q https://hub.spigotmc.org/jenkins/job/BuildTools/lastSuccessfulBuild/artifact/target/BuildTools.jar -O $MCPATH/BuildTools.jar \
              chmod +x $MCPATH/BuildTools.jar \
              java -jar $MCPATH/BuildTools.jar --rev $REVISION
      "
      ;;
    sponge)
      #fixme: implement sponge updating
      as_user "echo \"Sponge support coming soon...\""
      ;;
    vanilla)
      if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
        echo "$SERVICE is running! Will not start update."
      else
        as_user "cd $MCPATH && wget -q -O $MCPATH/versions --no-check-certificate https://launchermeta.mojang.com/mc/game/version_manifest.json"
        if [ "$1" == "snapshot" ] ; then
          JSONVERSION=$(cd $MCPATH && cat versions | python -c "exec(\"import json,sys\nobj=json.load(sys.stdin)\nversion=obj['latest']['snapshot']\nfor v in obj['versions']:\n   if v['id']==version:\n    print v['url']\")")
        else
          JSONVERSION=$(cd $MCPATH && cat versions | python -c "exec(\"import json,sys\nobj=json.load(sys.stdin)\nversion=obj['latest']['release']\nfor v in obj['versions']:\n   if v['id']==version:\n    print v['url']\")")
        fi
        as_user "cd $MCPATH && wget -q -O $MCPATH/versions --no-check-certificate $JSONVERSION"
        MC_SERVER_URL=$(cd $MCPATH && cat versions | python -c 'import json,sys;obj=json.load(sys.stdin);print obj["downloads"]["server"]["url"]')
        as_user "rm $MCPATH/versions"
        as_user "cd $MCPATH && wget -q -O $MCPATH/minecraft_server.jar.update --no-check-certificate $MC_SERVER_URL"
        if [ -f $MCPATH/minecraft_server.jar.update ] ; then
          if $(diff $MCPATH/$SERVICE $MCPATH/minecraft_server.jar.update >/dev/null) ; then
            echo "You are already running the latest version of $SERVICE."
          else
            as_user "mv $MCPATH/minecraft_server.jar.update $MCPATH/$SERVICE"
            echo "Minecraft successfully updated."
          fi
        else
          echo "Minecraft update could not be downloaded."
        fi
      fi
      ;;
  esac
}

mc_command() {
  command="$1";
  if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
    pre_log_len=$(wc -l "$MCPATH/logs/latest.log" | awk '{print $1}')
    echo "$SERVICE is running... executing command"
    as_user "screen -p 0 -S ${SCREENNAME} -X eval 'stuff \"$command\"\015'"
    sleep .1 # assumes that the command will run and print to the log file in less than .1 seconds
    # print output
    tail -n $[$(wc -l "$MCPATH/logs/latest.log" | awk '{print $1}')-$pre_log_len] "$MCPATH/logs/latest.log"
  fi
}

#Start-Stop here
case "$1" in
  console)
    as_user "screen -x $SCREENNAME"
    ;;
  start)
    mc_start
    ;;
  stop)
    mc_stop
    ;;
  restart)
    mc_stop
    mc_start
    ;;
  update)
    mc_stop
    echo "FLAVOR is $FLAVOR."
    mc_update $FLAVOR
    mc_start
    ;;
  status)
    if pgrep -u $USERNAME -f $SERVICE > /dev/null ; then
      echo "$SERVICE is running."
    else
      echo "$SERVICE is not running."
    fi
    ;;
  command)
    if [ $# -gt 1 ] ; then
      shift
      mc_command "$*"
    else
      echo "Must specify server command (try 'help'?)"
    fi
    ;;

  *)
  echo "Usage: $0 {start|stop|update|console|status|restart|command \"server command\"}"
  exit 1
  ;;
esac

exit 0
